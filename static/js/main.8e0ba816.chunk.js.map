{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_Movie","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","response","json","data","catch","err","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAwDA,SAASA,EAATC,GAAmC,IAAbC,EAAaD,EAAbC,OAAQC,EAAKF,EAALE,IAC1B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,iBAG1D,SAASC,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACjB,OACIR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAgBG,GAiBzBC,MAhDf,SAAAC,GAAkD,IAAlCN,EAAkCM,EAAlCN,MAAON,EAA2BY,EAA3BZ,OAAQa,EAAmBD,EAAnBC,OAAQC,EAAWF,EAAXE,SACnC,OACIZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACfL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAElCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACfL,EAAAC,EAAAC,cAAA,UAAKE,GACDJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACVM,EAAOE,IAAI,SAACL,EAAOM,GAAR,OAAkBd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,OAEjEd,EAAAC,EAAAC,cAAA,KAAGG,UAAU,kBACTL,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACAgB,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCGbC,6MAxCbC,MAAQ,KAGRC,cAAgB,WASd,OAReC,EAAKF,MAAMG,OAAOb,IAAI,SAACc,GACpC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,CACPxB,MAASuB,EAAMvB,MACfN,OAAU6B,EAAME,mBAChBd,IAAOY,EAAMG,GACbnB,OAASgB,EAAMhB,OACfC,SAAYe,EAAMf,gBAKtBmB,gCAAa,SAAAC,IAAA,IAAAN,EAAA,OAAAO,EAAAhC,EAAAiC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUZ,EAAKa,WADf,OACLZ,EADKS,EAAAI,KAEXd,EAAKe,SAAS,CACZd,WAHS,wBAAAS,EAAAM,SAAAT,EAAAU,WAMbJ,SAAW,WACT,OAAOK,MAAM,yDACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKrB,SACvBsB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFA5B1BP,KAAKX,8CAgCE,IACAL,EAAUgB,KAAKnB,MAAfG,OACP,OACE1B,EAAAC,EAAAC,cAAA,OAAKG,UAAWqB,EAAS,MAAQ,gBAC5BA,EAASgB,KAAKlB,gBAAkB,kBAvCzB4B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.8e0ba816.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Movie.css';\r\nimport proptypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\n// class Movie extends Component {\r\n\r\n//     static propTypes = {\r\n//         title: proptypes.string.isRequired,\r\n//         poster : proptypes.string.isRequired\r\n//     }\r\n// // proptype의 형과 반드시 있는지 없는지 확인을 할 수 있다.\r\n//     render() {\r\n//         return(\r\n//             <div>\r\n//             <h1>{this.props.title}</h1>\r\n//             <MoviePoster poster={this.props.poster}/>\r\n//             </div>\r\n//         ) // this로 부모에게서 받은 prop을 출력가능하다.\r\n//     }\r\n// }\r\n// class MoviePoster extends Component {\r\n\r\n//     static propTypes = {\r\n//         poster : proptypes.string.isRequired\r\n//     }\r\n//     render() {\r\n//         return(\r\n//             <img src={this.props.poster} alt=\"Test\"></img>\r\n//         )\r\n//     }\r\n// }\r\n\r\nfunction Movie({title, poster, genres, synopsis}) {\r\n    return(\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie_Columns\">\r\n            <MoviePoster poster={poster} alt={title}/>\r\n            </div>\r\n            <div className=\"Movie_Columns\">\r\n            <h1>{title}</h1>\r\n                <div className=\"Movie_Genres\">\r\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index}/>)}\r\n                </div>\r\n                <p className=\"Movie_Synopsis\">\r\n                    <LinesEllipsis\r\n                    text={synopsis}\r\n                    maxLine='3'\r\n                    ellipsis='...'\r\n                    trimRight\r\n                    basedOn='letters'\r\n                    />  \r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nfunction MoviePoster({poster, alt}){\r\n    return(\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie_Poster\"></img>\r\n    )\r\n}\r\nfunction MovieGenre({genre}){\r\n    return (\r\n        <span className=\"Movie_Genres\">{genre}</span>\r\n    )\r\n}\r\nMovie.propTypes = {\r\n    title : proptypes.string.isRequired,\r\n    poster : proptypes.string.isRequired,\r\n    genres : proptypes.array.isRequired,\r\n    synopsis : proptypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster : proptypes.string.isRequired, \r\n    alt : proptypes.string.isRequired\r\n}\r\nMovieGenre.propTypes = {\r\n    genre : proptypes.string.isRequired\r\n}\r\nexport default Movie\r\n\r\n// stateless Function 구문 Smart vs Dumb Components render 거치지 않고, 순서도 거치지 않는다.","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n\n// 배열로써 정리한다. \nclass App extends Component {\n\n  componentDidMount(){\n    this._getMovies();\n  }\n \n  state = {\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie) => {\n      return <Movie \n      title = {movie.title} \n      poster = {movie.medium_cover_image} \n      key = {movie.id} \n      genres= {movie.genres}\n      synopsis = {movie.synopsis}/>\n    }) \n    return movies;\n  }\n  \n  _getMovies = async() => {\n    const movies = await this._callApi()\n    this.setState({\n      movies\n    });\n  };\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating')\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n // movies 변수에 저장하는 방식\n // = () => {} 는\n  render() {\n    const {movies} = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n          {movies ? this._renderMovies() : 'Loading'} \n      </div>\n    );\n  }\n}\n// map을 해서, 배열을 새로 만들고, index를 key에 넘겨준다. prop로 title, poster을 넘겨준다.\n// movies가 있을때는 _renderMovies()실행! 언더바의 이유는, 기존에 있는거 중복을 회피하기 위해서이다. >>> 이 방식이 Loading state 방식! \nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}